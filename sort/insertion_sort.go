package sort

import "fmt"

//插入排序法
//和冒泡排序法不同的是，冒泡排序法利用左右两个指针比较大小，然后交换位置，将大值/小值向某个方向移动来实现排序
//插入排序法是找到此轮次最小的一个值，然后将这个值插到最靠前的位置.举例如下:
//有一个队列[3,4,5,6,1,7]，1出现在了不该出现的位置.所以需要将1插入到队列的最前方.流程如下:
//[3,4,5,6,1,7] => [3,4,5,6,,7] => [,3,4,5,6,7] => [1,3,4,5,6,7]
//本实例中的实现逻辑为将1之前的所有元素全部向后移动,流程如下:
//[3,4,5,6,1,7] => [3,3,4,5,6,7] => [1,3,4,5,6,7]

func insertionSort(arr []int) {
	fmt.Println("正在使用插入排序法对arr进行排序.arr=", arr)
	for i := 0; i < len(arr); i++ {
		tmp := arr[i]
		j := i - 1
		for ; j >= 0 && tmp < arr[j]; j-- {
			//所有的元素向后移动
			arr[j+1] = arr[j]
		}
		//插入到最开始的位置
		arr[j+1] = tmp
		fmt.Printf("step %d: arr: %v \n", i+1, arr)
	}
	fmt.Printf("result: %v \n", arr)
}
